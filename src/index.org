#+SETUPFILE: "setup.org"
#+TITLE: thi.ng/morphogen

* About the project

** Overview

Declarative 3D form evolution through tree-based transformations.

[[../assets/img/morphogen-virus.jpg]]

This project is part of the [[https://github.com/thi-ng/][thi.ng]] collection of Clojure &
Clojurescript libraries and is written in a literate programming
style. Building on top of its companion, the [[https://github.com/thi-ng/geom][thi.ng/geom]] library,
*morphogen* provides a set of extensible building blocks to generate
complex 3d structures in a completely data driven, declarative style.

[[http://en.wikipedia.org/wiki/Morphogenesis][Morphogensis]], as one of the fundamental processes in developmental
biology, is used as the guiding metaphor for the design approach and
the tools defined in this library: A purposely small number of spatial
transformers (currently only: subdivision, reflection, extrusion) can
be encoded as a (potentially) deeply nested tree, which is then
recursively applied to a single, basic 3d seed form (e.g. a cube) to
evolve it. This tree of operators fulfills a similar role as DNA does
in nature, but can also be understood as the [[https://en.wikipedia.org/wiki/Abstract_syntax_tree][AST]] of a program. The
operators themselves are [[https://en.wikipedia.org/wiki/Context-free_grammar][context free]], i.e. they have no direct
relationship to the geometric elements they operate on, nor do they
need to be aware of their position in the tree. In fact, the tree of
operators is entirely distinct from any geometries. When the tree is
walked & applied to the seed form, a second tree of mesh elements is
being constructed reflecting the transformation results. Technically,
the operators are pure functions, simply producing a sequence of new
geometry nodes. This combination enables the declarative approach to
tree building and the independent formulation, extraction and
injection of sub-trees and therefore the definition of a re-usable
vocabulary of higher order operators. The intention is to include some
of them in the core library as development progresses.

A more detailed description of all elements and their implementation
can be found in the [[file:core.org][core namespace]] of this library.

** Status

ALPHA quality, work in progress. This project is actively being worked
on and is likely to receive daily updates over the next couple of months.

** Example usage

Again, since operators are only depending on the basic topology (but
*not* the position, size or orientation) of the seed form, even this
small number of operators can already produce a vast number of
outcomes. The repo contains a [[file:examples.org][file with documented examples]] which can
be run from the REPL and export meshes in Stanford PLY format.

* Namespaces

- [[./core.org][thi.ng.morphogen.core]]
- [[./examples.org][examples]]

* Tests

* Project definition

** Injected properties                                             :noexport:
#+BEGIN_SRC clojure :noweb-ref version
0.2.0-SNAPSHOT
#+END_SRC
#+BEGIN_SRC clojure :exports none :noweb-ref project-url
https://github.com/thi-ng/morphogen
#+END_SRC
#+BEGIN_SRC clojure :exports none :noweb-ref gen-source-path
target/classes
#+END_SRC
#+BEGIN_SRC clojure :exports none :noweb-ref gen-test-path
target/test-classes
#+END_SRC
#+BEGIN_SRC clojure :exports none :noweb yes :noweb-ref cljs-artefact-path
target/morphogen-<<version>>.js
#+END_SRC

** Dependencies
*** Runtime
**** [[https://github.com/clojure/clojure][Clojure]]
#+BEGIN_SRC clojure :noweb-ref dep-clj
[org.clojure/clojure "1.7.0-RC1"]
#+END_SRC
**** [[https://github.com/clojure/clojurescript][ClojureScript]]
#+BEGIN_SRC clojure :noweb-ref dep-cljs
[org.clojure/clojurescript "0.0-3297"]
#+END_SRC
**** [[https://github.com/thi-ng/geom][thi.ng/geom-core]]
#+BEGIN_SRC clojure :noweb-ref dep-geom
[thi.ng/geom "0.0.815"]
#+END_SRC
*** Development
**** [[https://github.com/thi-ng/luxor][thi.ng/luxor]]
#+BEGIN_SRC clojure :noweb-ref dep-luxor
[thi.ng/luxor "0.3.0" :exclusions [thi.ng/common thi.ng/geom]]
#+END_SRC
**** [[https://github.com/hugoduncan/criterium][Criterium]]
#+BEGIN_SRC clojure :noweb-ref dep-criterium
[criterium "0.4.3"]
#+END_SRC
**** [[https://github.com/cemerick/clojurescript.test][clojurescript.test]]
#+BEGIN_SRC clojure :noweb-ref dep-cljs-test
[com.cemerick/clojurescript.test "0.3.3"]
#+END_SRC
**** [[https://github.com/emezeske/lein-cljsbuild][Cljsbuild]]
#+BEGIN_SRC clojure :noweb-ref dep-cljsbuild
[lein-cljsbuild "1.0.6"]
#+END_SRC

** Leiningen coordinates
#+BEGIN_SRC clojure :noweb yes :noweb-ref lein-coords
  [thi.ng/morphogen "0.2.0-SNAPSHOT"]
#+END_SRC

** Building this project

This project is written in a literate programming format and requires
[[https://www.gnu.org/software/emacs/][Emacs]] & [[http://orgmode.org][Org-mode]] to generate usable source code. Assuming both tools
are installed, the easiest way to generate a working project is via
command line (make sure =emacs= is on your path or else edit its path
in =tangle.sh=):

#+BEGIN_SRC bash
  git clone https://github.com/thi-ng/morphogen.git
  cd morphogen
  ./tangle.sh src/*.org test/*.org
#+END_SRC

Tangling is the process of extracting & combining source blocks from
=.org= files into an actual working project/source tree. Once tangling
is complete, you can =cd= into the generated project directory
(=babel=) and then use =lein= as usual.

*** Testing

The =project.clj= file defines an alias to trigger a complete build &
tests for both CLJ & CLJS versions.

#+BEGIN_SRC bash
  cd babel
  lein cleantest
#+END_SRC

To build the Clojurescript version simply run =lein cljsbuild test=
from the same directory. A small HTML harness for the resulting JS
file is also located in that folder (=babel/index.html=), allowing for
further experimentation in the browser.

*** Working with the REPL

Editing code blocks or files in Org-mode, then re-loading & testing
changes is quite trivial. Simply launch a REPL (via =lein= or Emacs)
as usual. Everytime you've made changes to an =.org= file, re-tangle
it from Emacs (=C-c C-v t=) or =tangle.sh=, then reload the namespace
in the REPL via =(require 'thi.ng.morphogen... :reload)= or similar.

** Leiningen project file                                          :noexport:
#+BEGIN_SRC clojure :tangle ../babel/project.clj :noweb yes :mkdirp yes :padline no
  (defproject thi.ng/morphogen "<<version>>"
    :description  "3d form evolution through tree-based transformations"
    :url          "<<project-url>>"
    :license      {:name "Apache Software License 2.0"
                   :url "http://www.apache.org/licenses/LICENSE-2.0"
                   :distribution :repo}
    :scm          {:name "git"
                   :url "git@github.com:thi-ng/morphogen.git"}

    :min-lein-vesion "2.4.0"

    :dependencies [<<dep-clj>>
                   <<dep-geom>>]

    :profiles     {:dev {:dependencies [<<dep-luxor>>
                                        <<dep-cljs>>
                                        <<dep-criterium>>]
                         :plugins [<<dep-cljsbuild>>
                                   <<dep-cljs-test>>]
                         :global-vars {*warn-on-reflection* true}
                         :jvm-opts ^:replace []
                         :aliases {"cleantest" ["do" "clean" "test" "cljsbuild" "test"]}}}

    :cljsbuild    {:builds [{:source-paths ["src" "test"]
                             :id "simple"
                             :compiler {:output-to "<<cljs-artefact-path>>"
                                        :optimizations :whitespace
                                        :pretty-print true}}]
                   :test-commands {"unit-tests" ["phantomjs" :runner "<<cljs-artefact-path>>"]}}

    :pom-addition [:developers [:developer
                                  [:name "Karsten Schmidt"]
                                  [:url "http://postspectacular.com"]
                                  [:timezone "0"]]])
#+END_SRC

** ClojureScript HTML harness                                      :noexport:
#+BEGIN_SRC html :tangle ../babel/index.html :noweb yes :mkdirp yes :padline no
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <title><<lein-coords>> test</title>
    </head>
    <body>
      <script type="text/javascript" src="<<cljs-artefact-path>>"></script>
    </body>
  </html>
#+END_SRC

** Accessing library version during runtime

The autogenerated namespace =thi.ng.morphogen.version= contains a single
symbol =version= holding the version string defined above:

#+BEGIN_SRC clojure :noweb yes
  (use '[thi.ng.morphogen.version])

  (prn version)
  ; "<<version>>"
#+END_SRC

*** Version namespace                                              :noexport:

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/morphogen/version.cljc :noweb yes :mkdirp yes :padline no :exports none
  (ns thi.ng.morphogen.version)

  (def version "<<version>>")
#+END_SRC

** Release history

| *Version* | *Released* | *Description*       | *Lein coordinates*           | *Tagged Github URL* |
|-----------+------------+---------------------+------------------------------+---------------------|
|     0.1.1 | 2015-02-27 | bugfix dependencies | =[thi.ng/morphogen "0.1.1"]= | [[https://github.com/thi-ng/morphogen/tree/0.1.1][0.1.1]]               |
|     0.1.0 | 2015-02-25 | 1st public release  | =[thi.ng/morphogen "0.1.0"]= | [[https://github.com/thi-ng/morphogen/tree/0.1.0][0.1.0]]               |

** Contributors

| *Name*          | *Role*                          | *Website*                  |
|-----------------+---------------------------------+----------------------------|
| [[k@thi.ng][Karsten Schmidt]] | initiator & principal developer | http://postspectacular.com |
|                 |                                 | http://thi.ng              |

** License

This project is open source and licensed under the [[http://www.apache.org/licenses/LICENSE-2.0][Apache Software License 2.0]].
